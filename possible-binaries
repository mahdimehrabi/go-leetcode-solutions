### Problem Statement

You are given a binary string containing the characters '0', '1', and '?'. The '?' character is a wildcard that can represent either '0' or '1'. Write a function that generates all possible binary strings by replacing each '?' with both '0' and '1'.

#### Input:
- A binary string containing '0', '1', and '?'.

#### Output:
- A list of all possible binary strings generated by replacing each '?' with '0' or '1'.

#### Example:
For the input string "0?11?0":
- Possible binary strings are: ["001100", "001110", "011100", "011110"]

### Solution

Here is the provided code and an explanation of how it works:

```go
package main

import (
	"fmt"
)

func BinSearch(bin string) []string {
	possibles := make([]string, 0)
	for i := 0; i < len(bin); i++ {
		if bin[i] == '?' {
			possiblesZero := bin[:i] + "0" + bin[i+1:]
			possiblesOne := bin[:i] + "1" + bin[i+1:]
			fmt.Println(possiblesZero, possiblesOne)
			possibles = append(possibles, BinSearch(possiblesZero)...)
			possibles = append(possibles, BinSearch(possiblesOne)...)
			return possibles
		}
	}
	if len(possibles) == 0 {
		possibles = append(possibles, bin)
	}
	return possibles
}

func main() {
	fmt.Println(BinSearch("0?11?0"))
}
```

#### Explanation:

1. **Function `BinSearch`**:
   - This function takes a binary string `bin` as input.
   - It initializes an empty list `possibles` to store all possible binary strings.
   - It iterates through each character of the string.
   - If it finds a '?', it creates two new strings: one with '0' in place of '?' and the other with '1'.
   - It recursively calls `BinSearch` on both new strings and appends their results to `possibles`.
   - The function returns once all '?' have been replaced.

2. **Base Case**:
   - If no '?' is found, the function adds the current string to `possibles`.

3. **Main Function**:
   - Calls `BinSearch` with the input string "0?11?0" and prints the result.

### Output:

For the input "0?11?0", the code will output:

```
[001100 001110 011100 011110]
```

Each '?' is replaced by both '0' and '1', generating all possible binary strings.
